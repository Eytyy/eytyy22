/** @jsxImportSource theme-ui */

import CollectionPostsList from '@components/collection-posts-list';
import Header from '@components/header';
import MetaDates from '@components/meta-dates';
import MetaTags from '@components/meta-tags';
import { getChildPostsUniqueTags } from '@lib/helpers';
import myPortableTextComponents from '@lib/portablet-text-component';
import { getClient } from '@lib/sanity.server';
import { PortableText } from '@portabletext/react';
import Head from 'next/head';

const Collection = ({ data }) => {
  if (!data) return null;

  const { title, description, posts, allPostsTags, _createdAt } =
    data;
  const tags = getChildPostsUniqueTags(allPostsTags);
  const isDraft = posts
    .map((post) => post.status)
    .some((status) => status !== 'finished');

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <div sx={{ variant: 'superGrid' }}>
        <div
          sx={{
            variant: 'superGrid.fullWidthNoBleedCol',
            display: ['block', null, 'grid'],
            gridTemplateColumns: [
              'repeat(6,1fr)',
              null,
              'repeat(12,1fr)',
            ],
            columnGap: [3, 5, 5],
          }}
        >
          <div sx={{ gridColumn: '1/7' }}>
            <header
              sx={{
                variant: 'page.header',
                mb: 6,
                position: 'relative',
              }}
            >
              {isDraft && (
                <div
                  sx={{
                    fontSize: 0,
                    display: 'flex',
                    gap: 2,
                    alignItems: 'center',
                    mb: 2,
                  }}
                >
                  <i
                    sx={{
                      display: 'inline-block',
                      bg: 'red',
                      width: '20px',
                      height: '20px',
                      borderRadius: '20px',
                    }}
                  ></i>
                  Draft
                </div>
              )}
              <h1 sx={{ variant: 'text.pageTitle' }}>{title}</h1>
              <div sx={{ variant: 'meta' }}>
                {_createdAt && (
                  <MetaDates prefix="posted on" date={_createdAt} />
                )}
                {tags && <MetaTags tags={tags} />}
              </div>
            </header>
            {description && (
              <div sx={{ variant: 'text.body' }}>
                <PortableText
                  value={description}
                  components={myPortableTextComponents}
                />
              </div>
            )}
          </div>
          <div sx={{ gridColumn: '7/-1' }}>
            {posts && (
              <div
                sx={{
                  fontFamily: 'heading',
                  fontSize: [4],
                  textTransform: 'lowercase',
                  pl: [0, 0, 4],
                }}
              >
                <CollectionPostsList posts={posts} />
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default Collection;

export async function getStaticPaths() {
  const paths = await getClient().fetch(
    `*[_type == 'collection'][]{
      'slug': slug.current,
      'type': type->.slug.current
    }`
  );
  return {
    paths: paths.map(({ slug, type }) => ({
      params: {
        collectionType: type,
        slug: slug,
      },
    })),
    fallback: true,
  };
}
export async function getStaticProps({ params }) {
  const { collectionType, slug } = params;
  const query = `*[_type == "collection" && slug.current == $slug && type->.slug.current == $collectionType][0]{
    title,
    description,
    slug,
    _createdAt,
    posts[] -> {
      _id,
      title,
      "slug": slug.current,
      tags[] -> {
        ...,
        "slug": slug.current
      }
    },
    "allPostsTags": posts[]->.tags[]-> {
      "slug": slug.current,
      title,
      _id
    }
  }`;
  const data = await getClient().fetch(query, {
    collectionType,
    slug,
  });

  if (!data) return { notFound: true };

  return {
    props: {
      data,
    },
  };
}
