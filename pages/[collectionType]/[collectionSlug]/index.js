/** @jsxImportSource theme-ui */

import Header from '@components/header';
import Post from '@components/post';
import {getClient} from '@lib/sanity.server';
import Head from 'next/head';

const Collection = ({data}) => {
  const {title, description, posts, slug, tags: allTags} = data[0];

  // Reduce allTags to an object to remove duplicates
  const tags = allTags.reduce((prev, current) => {
    return prev.slug === current.slug
      ? prev
      : {...prev, [current.slug]: {...current}};
  }, {});

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Header
        toggleProgress={() => {
          setShowProgress((p) => !p);
        }}
      />
      <div sx={{variant: 'fullGrid'}}>
        <div sx={{gridColumn: '2/span 8'}}>
          <div sx={{mb: 6}}>
            <h1 sx={{variant: 'text.pageTitle'}}>{title}</h1>
            {tags && (
              <div sx={{variant: 'text.meta', display: 'flex', gap: 4}}>
                {Object.values(tags).map((tag) => (
                  <span key={tag._id}>#{tag.slug}</span>
                ))}
              </div>
            )}
          </div>
          <div>
            {posts &&
              posts.map((post, index) => (
                <Post {...post} key={post._id} index={index} />
              ))}
          </div>
        </div>
        <aside sx={{gridColumn: '11 / 14'}}>
          <div sx={{position: 'sticky', top: '85px'}}>
            {posts &&
              posts.map((post, index) => (
                <div sx={{mb: 4}} key={post._id}>
                  <a href={`#${post.slug}`} sx={{mb: 4, fontSize: '1'}}>
                    <span>Part #{index + 1}:</span>
                    {post.title}
                  </a>
                </div>
              ))}
          </div>
        </aside>
      </div>
    </>
  );
};

export default Collection;

export async function getStaticPaths() {
  const paths = await getClient().fetch(
    `*[_type == 'collection'][]{
      'slug': slug.current,
      'type': type->.slug.current
    }`
  );
  return {
    paths: paths.map(({slug, type}) => ({
      params: {
        collectionType: type,
        collectionSlug: slug,
      },
    })),
    fallback: true,
  };
}
export async function getStaticProps({params}) {
  const {collectionType, collectionSlug} = params;
  const query = `*[_type == "collection" && slug.current == $collectionSlug && type->.slug.current == $collectionType]{
    ..., 
    posts[] -> {
      ...,
      "slug": slug.current,
      tags[] ->
    },
    "tags": posts[]->.tags[]-> {
      "slug": slug.current, 
      title, 
      _id
    }
  }`;
  const data = await getClient().fetch(query, {collectionType, collectionSlug});
  return {
    props: {
      data,
    },
  };
}
