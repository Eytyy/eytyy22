/** @jsxImportSource theme-ui */
import CollectionPostsList from '@components/collection-posts-list';
import Header from '@components/header';
import MetaDates from '@components/meta-dates';
import MetaTags from '@components/meta-tags';
import myPortableTextComponents from '@lib/portablet-text-component';
import { getClient } from '@lib/sanity.server';
import { PortableText } from '@portabletext/react';
import Head from 'next/head';
import Link from 'next/link';

const Post = ({ data }) => {
  if (!data) return null;
  const {
    _id,
    title,
    body,
    tags,
    _createdAt,
    _updatedAt,
    referencedIn,
  } = data;

  function getCollectionInfo(collection, postID) {
    const { allPosts, ...rest } = collection;
    const currentPostIndex = allPosts.findIndex(
      (post) => post._id === postID
    );
    const isFirstPost = currentPostIndex === 0;
    const isLastPost = currentPostIndex === allPosts.length - 1;
    const nextPostIndex = isLastPost ? '0' : currentPostIndex + 1;
    const otherPosts = [...allPosts.slice(0, currentPostIndex)];
    allPosts.filter((post) => post._id !== postID);

    return {
      ...rest,
      currentPostIndex,
      isFirstPost,
      isLastPost,
      otherPosts,
      allPosts,
      nextPost: collection.allPosts[nextPostIndex],
    };
  }

  const partOfCollection = typeof referencedIn !== 'undefined';

  const {
    currentPostIndex,
    isFirstPost,
    isLastPost,
    otherPosts,
    allPosts,
    nextPost,
    title: collectionTitle,
    slug: collectionSlug,
  } = partOfCollection ? getCollectionInfo(referencedIn, _id) : null;

  return (
    <>
      <Head>
        <title>{title}</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <article sx={{ variant: 'fullGrid' }}>
        <div sx={{ variant: 'fullGrid.contentCol' }}>
          <header sx={{ variant: 'page.header', mb: 6 }}>
            <h1 sx={{ mb: 4, variant: 'text.pageTitle' }}>{title}</h1>

            <div sx={{ variant: 'meta' }}>
              {_createdAt && (
                <MetaDates prefix="published on" date={_createdAt} />
              )}
              {_updatedAt && (
                <MetaDates prefix="updated on" date={_updatedAt} />
              )}
              {tags && <MetaTags tags={tags} />}
            </div>
          </header>
          {!isFirstPost && (
            <div
              sx={{
                variant: 'contextual.small',
              }}
            >
              <p>
                This is part {currentPostIndex + 1} {' of '}
                <Link href={`/guide/${collectionSlug}`} passHref>
                  <a sx={{ variant: 'link' }}>{collectionTitle}</a>
                </Link>{' '}
                Guide.
                <br />
                Previous{' '}
                {otherPosts.length > 1 ? 'posts: ' : 'post: '}
                {<CollectionPostsList posts={otherPosts.reverse()} />}
              </p>
            </div>
          )}
          <div sx={{ variant: 'text.body' }}>
            <PortableText
              value={body}
              components={myPortableTextComponents}
            />
          </div>
          {!isLastPost && nextPost && (
            <aside sx={{ variant: 'contextual.big' }}>
              <p>
                Read next{': '}
                <Link href={`/post/${nextPost.slug}`} passHref>
                  <a sx={{ variant: 'link' }}>{nextPost.title}</a>
                </Link>
              </p>
            </aside>
          )}
        </div>
      </article>
    </>
  );
};

export default Post;

export async function getStaticPaths() {
  const paths = await getClient().fetch(
    `*[_type == 'post' && defined(slug)][].slug.current`
  );
  return {
    paths: paths.map((slug) => ({
      params: {
        slug,
      },
    })),
    fallback: true,
  };
}

export async function getStaticProps({ params }) {
  const data = await getClient().fetch(
    `*[_type == 'post' && defined(slug) && slug.current == $slug][0] {
       ...,
      tags[]-> {
        ...,
        'slug': slug.current
      },
      "referencedIn": *[_type == 'collection' && references(^._id)][0] {
        "slug": slug.current,
        title,
        "type": type->.title,
        "allPosts": posts[]-> {
          ...,
          "slug": slug.current
        }
      }
    }`,
    {
      slug: params.slug,
    }
  );
  return {
    props: {
      data,
    },
  };
}
