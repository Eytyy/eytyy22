/** @jsxImportSource theme-ui */
import Head from 'next/head';

import { getClient } from '@lib/sanity.server';

import Header from '@components/header';
import CollectionPreview from '@components/collection-preview';
import QuickPost from '@components/quick-post';

export default function Home({ data }) {
  const { posts } = data;
  console.log(posts);

  function renderContent({ _type, _id, ...rest }) {
    switch (_type) {
      case 'collection':
        return <CollectionPreview key={_id} {...rest} />;
      case 'quickPost':
        return <QuickPost key={_id} {...rest} />;
      default:
        return null;
    }
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header
        toggleProgress={() => {
          setShowProgress((p) => !p);
        }}
      />
      <div sx={{ variant: 'fullGrid' }}>
        <main sx={{ variant: 'fullGrid.contentCol' }}>
          {posts && posts.map(renderContent)}
        </main>
      </div>
    </div>
  );
}

export async function getStaticProps() {
  const allPostsQuery = `
    {
      "posts": *[_type in ["quickPost", 'collection']] | order(publishedAt asc) {
        ...,
        "slug": slug.current,
        _type == "quickPost" => {
          tags[]-> {
            ...,
            "slug": slug.current
          },
        },
        _type == "collection" => {
          type-> {
            ...,
            "slug": slug.current
          },
          posts[]-> {
            ...,
            "slug": slug.current
          },
          "allPostsTags": posts[]->.tags[]-> {
            _id,
            title,
            "slug": slug.current,
          },
          "_lastUpdatedAt": posts[]-> | order(_updatedAt desc)[0]._updatedAt
        }
      },
      "tracker": *[_type == 'progressTracker'][0] {
        ...,
        items
      }
    }
  `;
  const data = await getClient().fetch(allPostsQuery);
  return {
    props: {
      data,
    },
  };
}
