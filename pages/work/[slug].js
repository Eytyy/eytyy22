/** @jsxImportSource theme-ui */
import { useEffect } from 'react';
import Head from 'next/head';
import { getClient } from '@lib/sanity.server';

import { useNavData } from '@lib/context';
import ProjectContainer from '@components/project/layout01';

const Project = ({ data }) => {
  const { navData, setNav } = useNavData();
  useEffect(() => {
    if (data.projectsByStatus && navData.length === 0) {
      const projects = data.projectsByStatus
        ? data.projectsByStatus.flatMap((status) => status.projects)
        : [];
      const allData = [...projects, ...data.posts];
      setNav(allData);
    }
  }, [setNav, navData, data]);

  if (!data.project) return null;
  const { title } = data.project;
  return (
    <>
      <Head>
        <title>{title}</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ProjectContainer {...data.project} />
    </>
  );
};

export default Project;

export async function getStaticPaths() {
  const paths = await getClient().fetch(
    `*[_type == 'project' && defined(slug)][].slug.current`
  );
  return {
    paths: paths.map((slug) => ({
      params: {
        slug,
      },
    })),
    fallback: true,
  };
}

export async function getStaticProps({ params }) {
  const data = await getClient().fetch(
    `{
      "project": *[_type == 'project' && defined(slug) && slug.current == $slug][0] {
        title, body, year, role, team[],
        showMainMedia,
        "mainMedia": {
          "type": mainMediaType,
          "style": mainMediaStyle,
          mainMediaType == 'video' => {
            "video": { "autoPlay": mainMediaVideo.autoPlay, "loop": mainMediaVideo.loop, "url": mainMediaVideo.file.asset->.url }
          },
          mainMediaType == 'image' => {
            'image': mainMediaImage
          },
        },
        "status": status->.slug.current, year,
        sections[]{
          _key, type, hasBody, body, name,
          "layout": { parallax, behavior },
          type == 'video' => {
            "url": videoModule.file.asset->.url,
            "caption": videoModule.caption,
            "alt": videoModule.alt,
            "loop": videoModule.loop,
            "autoPlay": videoModule.autoPlay
          },
          type == 'image' => {
            "image": imageModule.image,
            "caption": imageModule.caption,
            "alt": imageModule.alt
          },
          type == 'media' => {
            "content": mediaModule.content[]{
              ...,
              _type == 'videoModule' => { "url": file.asset->.url },
            }
          }
        }
    },
     "posts": *[_type in ["post"]] | order(_createdAt asc) {
      _id, _type, "slug": slug.current, title
    },
    "projectsByStatus": *[_type == 'status'] | order(weight desc) {
      weight,
      "projects": *[_type == 'project' && references(^._id)] | order(year desc) {
        _type, _id, title, "slug": slug.current, "type": type->.name, role, year
      }
    }}
  `,
    {
      slug: params.slug,
    }
  );
  return {
    props: {
      data,
    },
  };
}
